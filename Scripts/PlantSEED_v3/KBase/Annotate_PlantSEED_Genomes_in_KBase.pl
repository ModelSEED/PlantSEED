#!/usr/bin/env perl
use strict;
use warnings;
use JSON;
my @temp=();
my $Token = $ENV{'KB_AUTH_TOKEN'};

my $WS="PlantSEED_v3";

# Here, these values are rather arbitrary, but are based on examining
# how many of the metabolic functions are propagated between Arabidopsis
# and other species depending on the sequence identity threshold.
my %Phyla_Threshold=("Eudicot"=>0.6,"Monocot"=>0.55,"Basal"=>0.3);
open(FH, "< Species_Phyla.txt");
my %Species_Threshold=();
while(<FH>){
    chomp;
    @temp=split(/\t/,$_);
    my ($Spp,$Version) = split(/_/,$temp[0]);
    $Species_Threshold{$Spp}=$Phyla_Threshold{$temp[1]};
}
close(FH);

# The file we are reading is generated by the scripts used to work with OrthoFinder
# output, and calculating pairwise sequence identity
open(FH, "< Annotated_Proteins_Threshold.txt");
my %Annotated_Proteins = ();
my %Annotations = ();
while(<FH>){
    chomp;
    my ($threshold,$family,$centroid,$function,$propagation,$orthologs)=split(/\t/,$_,-1);

    if($function ne "Uncurated" and $propagation ne "Unpropagated"){
	$Annotations{$function}=1;
	$Annotated_Proteins{$centroid}=$function;
	foreach my $spp_ortholog_score (split(/\|"\|/,$orthologs)){
#	    my ($spp_ortholog,$score)=split(/(?<!\|)(:)(?<!\|)/,$spp_ortholog_score);
	    my ($spp_ortholog,$score)=split(/:/,$spp_ortholog_score);
	    my ($spp,$ortholog)=split(/\|\|/,$spp_ortholog);

	    ($spp,my $version) = split(/_/,$spp);

	    if(!exists($Species_Threshold{$spp})){
		print("Warning: Species missing: ".$spp."_".$version,"\n");
	    }

	    next unless exists($Species_Threshold{$spp}) && $threshold == $Species_Threshold{$spp};
	    $Annotated_Proteins{$spp_ortholog}=$function;
	}
    }
}

use Bio::KBase::workspace::Client;
my $Workspace_URL = "https://kbase.us/services/ws";
my $WS_Client=Bio::KBase::workspace::Client->new($Workspace_URL,token => $Token);
my $List_Genomes = $WS_Client->list_objects({workspaces=>[$WS],type=>"KBaseGenomes.Genome"});

if(scalar(@$List_Genomes)==0){
    print("Warning: Check Genome versions\n");
    exit();
}

open(ANC, "> ".$WS."_Annotation_Count.txt");
my %Propagated_Proteins=();
foreach my $genome ( map { $_->[1] } @$List_Genomes ){
    print("Annotating: ",$genome,"\n");

    my $data = $WS_Client->get_objects2({objects=>[{ref=>$WS."/".$genome}]})->{data}[0];

    my @Ftrs = @{$data->{data}{features}};
    my %Ftr_Index=();
    for(my $i=0;$i<scalar(@Ftrs);$i++){
	$Ftr_Index{$Ftrs[$i]{'id'}}=$i;
	if(exists($Ftrs[$i]{'function'})){
	    delete($Ftrs[$i]{'function'});
	}
	$Ftrs[$i]{'functions'}=[];
    }

    my @mRNAs = @{$data->{data}{mrnas}};
    for(my $i=0;$i<scalar(@mRNAs);$i++){
	my $Obj_ID = $mRNAs[$i]->{id};
	my $Spp_Protein = $genome."||".$Obj_ID;

	if(exists($Annotated_Proteins{$Spp_Protein})){
	    my $Function=$Annotated_Proteins{$Spp_Protein};
	    $mRNAs[$i]{'functions'}=[$Function];
	    $Propagated_Proteins{$Spp_Protein}=$Obj_ID;
	    $Ftrs[$Ftr_Index{$mRNAs[$i]{'parent_gene'}}]{'functions'}=[$Function];
	}else{
	    $mRNAs[$i]{'functions'}=[];
	}
    }

    print ANC $genome,"\t",scalar(@Ftrs),"\t";
    print ANC scalar( grep { $_ =~ /^${genome}/ } keys %Annotated_Proteins),"\t";
    print ANC scalar( grep { $_ =~ /^${genome}/ } keys %Propagated_Proteins),"\n";

    $WS_Client->save_object({id=>$genome,type=>"KBaseGenomes.Genome",data=>$data->{data},metadata=>$data->{info}[10],workspace=>$WS});
}
close(ANC);

open(ANM, "> ".$WS."_Annotation_Match.txt");
foreach my $annprot (sort keys %Annotated_Proteins){
    print ANM $annprot,"\t";
    if(exists($Propagated_Proteins{$annprot})){
	print ANM $Propagated_Proteins{$annprot};
    }
    print ANM "\t";
    print ANM $Annotated_Proteins{$annprot},"\n";
}
close(ANM);
