#!/usr/bin/env perl
use strict;
use warnings;
use DateTime;
use JSON;
my @temp=();

my $genome = "Sbicolor_3.1.1";
$genome = "Athaliana_TAIR10";
my $phy_genome = "Sbicolor_v3.1.1";
$phy_genome = "Athaliana_TAIR10";

# Should read this directly from template files
my %Template_Compartment_Mapping=('c' => 'cytosol', 'g' => 'golgi', 'w' => 'cellwall',
                                  'n' => 'nucleus', 'r' => 'endoplasm',
                                  'v' => 'vacuole', 'cv' => 'vacuole',
                                  'd' => 'plastid', 'cd' => 'plastid',
                                  'm' => 'mitochondria','cm' => 'mitochondria',
                                  'mj' => 'mitointer',
                                  'x' => 'peroxisome');

# Here, these values are rather arbitrary, but are based on examining
# how many of the metabolic functions are propagated between Arabidopsis
# and other species depending on the sequence identity threshold.
my %Phyla_Threshold=("Eudicot"=>0.6,"Monocot"=>0.55,"Basal"=>0.3);
open(FH, "< Species_Phyla.txt");
my %Species_Threshold=();
while(<FH>){
    chomp;
    @temp=split(/\t/,$_);
    my ($Spp,$Version) = split(/_/,$temp[0]);
    $Species_Threshold{$Spp}=$Phyla_Threshold{$temp[1]};
}
close(FH);

my $local_file = "../../../Data/PlantSEED_v3/PlantSEED_Roles.json";
my $json_file="";
open(FH, "< $local_file");
while(<FH>){
    $json_file.=$_;
}
close(FH);
my $Curation = from_json($json_file);

#Load Annotation
my %Ftrs=();
foreach my $row (@$Curation){
    foreach my $spp_ftr (@{$row->{'features'}}){
        $Ftrs{$spp_ftr}{'roles'}{$row->{role}}=1;
    }

    foreach my $cpt (keys %{$row->{'localization'}}){
        foreach my $entry (keys %{$row->{'localization'}{$cpt}}){
            if(exists($Ftrs{$entry})){
                $Ftrs{$entry}{'cpts'}{$cpt}=1;
            }
        }
    }
}

my %Ftr_Funcs=();
foreach my $ftr (sort keys %Ftrs){
    my $func = join(" / ", sort keys %{$Ftrs{$ftr}{'roles'}});
    my $cpts = join(" # ", map { $Template_Compartment_Mapping{$_} } sort keys %{$Ftrs{$ftr}{'cpts'}});
    $func.=" # ".$cpts if $cpts ne "";

    $Ftr_Funcs{$ftr}=$func;
}

# The file we are reading is generated by the scripts used to work with OrthoFinder
# output, and calculating pairwise sequence identity
open(FH, "< ../../../../../Argonne/2022/local/Annotated_Proteins_Threshold.txt");
my %Annotated_Proteins = ();
my %Annotations = ();
while(<FH>){
    chomp;
    my ($threshold,$family,$centroid,$function,$propagation,$orthologs)=split(/\t/,$_,-1);

    if($function ne "Uncurated" and $propagation ne "Unpropagated"){
	$Annotations{$function}=1;
	$Annotated_Proteins{$centroid}=$function;
	foreach my $spp_ortholog_score (split(/\|"\|/,$orthologs)){
	    my ($spp_ortholog,$score)=split(/:/,$spp_ortholog_score);
	    my ($spp,$ortholog)=split(/\|\|/,$spp_ortholog);

	    ($spp,my $version) = split(/_/,$spp);

	    if(!exists($Species_Threshold{$spp})){
		print("Warning: Species missing: ".$spp."_".$version,"\n");
	    }

	    next unless exists($Species_Threshold{$spp}) && $threshold == $Species_Threshold{$spp};
	    $Annotated_Proteins{$spp_ortholog}=$function;
	}
    }
}

$local_file = "../../../../../Argonne/2022/local/".$genome.".json";;

open(ANC, " >> Annotation_Count.txt");
my %Propagated_Proteins=();

my $dt = DateTime->now(time_zone => 'America/Chicago');
print("Annotating: ",$genome," at ",$dt,"\n");

$json_file="";
open(FH, "< $local_file");
while(<FH>){
    $json_file.=$_;
}
close(FH);
my $data = from_json($json_file);

my @Ftrs = @{$data->{features}};
my %Ftr_Index=();
for(my $i=0;$i<scalar(@Ftrs);$i++){
    $Ftr_Index{$Ftrs[$i]{'id'}}=$i;
    if(exists($Ftrs[$i]{'function'})){
	delete($Ftrs[$i]{'function'});
    }
    $Ftrs[$i]{'functions'}=[];
}

my @mRNAs = @{$data->{mrnas}};
for(my $i=0;$i<scalar(@mRNAs);$i++){

    my $Obj_ID = $mRNAs[$i]{id};
    my $Ftr_ID = $mRNAs[$i]{'parent_gene'};
    my $Spp_Protein = $genome."||".$Ftr_ID;
    my $Phy_Gene = $phy_genome."||".$Ftr_ID;
    my $Phy_mRNA = $phy_genome."||".$Obj_ID;

    if(exists($Ftr_Funcs{$Phy_Gene})){
	my $Function=$Ftr_Funcs{$Phy_Gene};
	$mRNAs[$i]{'functions'}=[$Function];
	$Ftrs[$Ftr_Index{$Ftr_ID}]{'functions'}=[$Function];
	print("Direct:",$Function,"\n");
    }elsif(exists($Annotated_Proteins{$Phy_Gene})){
	my $Function=$Annotated_Proteins{$Phy_Gene};
	$mRNAs[$i]{'functions'}=[$Function];
	$Propagated_Proteins{$Phy_Gene}=$Obj_ID;
	$Ftrs[$Ftr_Index{$mRNAs[$i]{'parent_gene'}}]{'functions'}=[$Function];
	print("Indirect Gene:",$Function,"\n");
    }elsif(exists($Annotated_Proteins{$Phy_mRNA})){
	my $Function=$Annotated_Proteins{$Phy_mRNA};
	$mRNAs[$i]{'functions'}=[$Function];
	$Propagated_Proteins{$Phy_mRNA}=$Obj_ID;
	$Ftrs[$Ftr_Index{$mRNAs[$i]{'parent_gene'}}]{'functions'}=[$Function];
	print("Indirect mRNA:",$Function,"\n");
    }else{
	$mRNAs[$i]{'functions'}=[];
    }
}

print ANC $genome,"\t",scalar(@Ftrs),"\t";
print ANC scalar( grep { $_ =~ /^${genome}/ } keys %Annotated_Proteins),"\t";
print ANC scalar( grep { $_ =~ /^${genome}/ } keys %Propagated_Proteins),"\n";
close(ANC);

open(FH, "> $local_file.annotated");
print FH to_json($data,{pretty=>1});
close(FH);

$dt = DateTime->now(time_zone => 'America/Chicago');
print("Annotated: ",$genome," at ",$dt,"\n");
